CCS PCH C Compiler, Version 5.011, 5967               24-Ã·˙-23 15:23

               Filename:   E:\MIKRO-II\t8\openproject.lst

               ROM used:   300 bytes (1%)
                           Largest free fragment is 30416
               RAM used:   26 (1%) at main() level
                           26 (1%) worst case
               Stack used: 2 locations (1 in main + 1 for interrupts)
               Stack size: 31

*
0800:  GOTO   0906
*
0808:  NOP   
080A:  NOP   
080C:  NOP   
080E:  NOP   
0810:  NOP   
0812:  NOP   
0814:  NOP   
0816:  NOP   
0818:  MOVWF  04
081A:  MOVFF  FD8,05
081E:  MOVFF  FE0,06
0822:  MOVLB  0
0824:  MOVFF  FE9,0C
0828:  MOVFF  FEA,07
082C:  MOVFF  FE1,08
0830:  MOVFF  FE2,09
0834:  MOVFF  FD9,0A
0838:  MOVFF  FDA,0B
083C:  MOVFF  FF3,12
0840:  MOVFF  FF4,13
0844:  MOVFF  FFA,14
0848:  MOVFF  00,0E
084C:  MOVFF  01,0F
0850:  MOVFF  02,10
0854:  MOVFF  03,11
0858:  BTFSS  FF2.5
085A:  GOTO   0864
085E:  BTFSC  FF2.2
0860:  GOTO   08A6
0864:  MOVFF  0E,00
0868:  MOVFF  0F,01
086C:  MOVFF  10,02
0870:  MOVFF  11,03
0874:  MOVFF  0C,FE9
0878:  MOVFF  07,FEA
087C:  BSF    07.7
087E:  MOVFF  08,FE1
0882:  MOVFF  09,FE2
0886:  MOVFF  0A,FD9
088A:  MOVFF  0B,FDA
088E:  MOVFF  12,FF3
0892:  MOVFF  13,FF4
0896:  MOVFF  14,FFA
089A:  MOVF   04,W
089C:  MOVFF  06,FE0
08A0:  MOVFF  05,FD8
08A4:  RETFIE 0
.................... #include <main.h> 
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
....................  
.................... #list 
....................  
.................... #DEVICE HIGH_INTS=TRUE 
.................... #device adc=10 
....................  
.................... #FUSES NOWDT                     //No Watch Dog Timer 
.................... #FUSES WDT32768                    //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES HSPLL                     //High Speed Crystal/Resonator with PLL enabled 
.................... #FUSES NOPROTECT                 //Code not protected from reading 
.................... #FUSES BROWNOUT                //No brownout reset 
.................... //#FUSES BORV20                    //Brownout reset at 2.0V 
.................... #FUSES NOPUT                     //No Power Up Timer 
.................... #FUSES NOCPD                     //No EE protection 
.................... #FUSES STVREN                    //Stack full/underflow will cause reset 
.................... #FUSES NODEBUG                   //No Debug mode for ICD 
.................... #FUSES NOLVP                     //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                     //Program memory not write protected 
.................... #FUSES NOWRTD                    //Data EEPROM not write protected 
.................... #FUSES NOIESO                      //Internal External Switch Over mode enabled 
.................... #FUSES NOFCMEN                     //Fail-safe clock monitor enabled 
.................... #FUSES NOPBADEN                 ///PORTB pins are configured as analog input channels on RESET 
.................... #FUSES NOWRTC                    //configuration not registers write protected 
.................... #FUSES NOWRTB                    //Boot block not write protected 
.................... #FUSES NOEBTR                    //Memory not protected from table reads 
.................... #FUSES NOEBTRB                   //Boot block not protected from table reads 
.................... #FUSES NOCPB                     //No Boot Block code protection 
.................... #FUSES MCLR                      //Master Clear pin enabled 
.................... #FUSES NOLPT1OSC                   //Timer1 configured for low-power operation 
.................... #FUSES NOXINST                   //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #FUSES PLL5                      //Divide By 12(48MHz oscillator input) 
.................... #FUSES CPUDIV1                   //System Clock by 2 
.................... #FUSES USBDIV                    //USB clock source comes from PLL divide by 2 
.................... #FUSES VREGEN                    //USB voltage regulator enabled 
.................... #FUSES ICPRT                     //ICPRT enabled 
.................... #FUSES WRTB 
.................... #FUSES NOICPRT  
.................... #FUSES NOLPT1OSC 
.................... #FUSES CCP2B3  
.................... #FUSES NOCPB 
.................... #FUSES NOCPD 
.................... #FUSES NOWRTC 
.................... #FUSES NOWRTD 
.................... #FUSES NOEBTR 
.................... #FUSES NOEBTRB               
....................  
.................... /* systm clock is 48 MHz */ 
.................... #use delay(clock=48000000,RESTART_WDT) 
.................... /* --- BEGIN: changes required for bootloader ------------------------------ */ 
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* map reset vector and interrupt vector                                     */ 
.................... /* 0x000-0x7FF is used by the bootloader. The bootloader maps the original   */ 
.................... /* reset vecotr (0x000) to 0x800 and the reset vector (0x008) to 0x800.      */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... #build (reset=0x800, interrupt=0x808) 
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* reserve boot block area                                                   */ 
.................... /* This memory range is used by the bootloader, so the application must not  */ 
.................... /* use this area.                                                            */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... #org 0, 0x7FF {} 
....................  
.................... /* --- END: changes required for bootloader -------------------------------- */ 
....................  
....................  
....................  
....................  
....................  
.................... #byte PORTB=0xF81  
....................  
.................... void init (void);             //????s? t?? ???t??a? a?????p???s?? 
.................... void timer0_int(void);        //????s? t?? ???t??a? d?a??p?? ap? t?? timer0 
.................... int counter0=2; 
.................... int counter1=3; 
.................... int counter2=4; 
.................... int counter3=6; 
....................                               //St? µetaﬂ??t? a?t? d??eta? ? a????? t?µ? 20. 
....................                           
.................... void main(){          
*
0906:  CLRF   FF8
0908:  BCF    FF1.2
090A:  BSF    FD0.7
090C:  BSF    07.7
090E:  MOVLW  02
0910:  MOVWF  16
0912:  MOVLW  03
0914:  MOVWF  17
0916:  MOVLW  04
0918:  MOVWF  18
091A:  MOVLW  06
091C:  MOVWF  19
091E:  MOVF   FC1,W
0920:  ANDLW  C0
0922:  IORLW  0F
0924:  MOVWF  FC1
0926:  MOVLW  07
0928:  MOVWF  FB4
....................    init();       // ???s? t?? ???t??a? t?? a?????? ???µ?se?? 
092A:  BRA    08EA
....................    while (TRUE){  
092C:  BRA    092C
....................     // t? ????? p????aµµa de? ???e? t?p?ta. ??te?e? ??a? at??µ??a ﬂ???? 
....................    } 
.................... }          
....................  
.................... // ???? ???t??a? e??p???t?s?? t?? d?a??p?? 
.................... // ?d???a ?t? ? ep?µe?? ???t??a e??a? ? ???t??a e??p???t?s?? t?? ap? t?? Timer0 
.................... #INT_TIMER0 
.................... void timer0_int(void){ 
092E:  SLEEP 
....................    //a????? t?µ? t?? timer0 ?ste ? ep?µe?? d?a??p? ?a s?µﬂe? se ????? ?s? µe 10 ms 
....................    set_timer0(46786); 
*
08A6:  MOVLW  B6
08A8:  MOVWF  FD7
08AA:  MOVLW  C2
08AC:  MOVWF  FD6
....................    counter0--; 
08AE:  DECF   16,F
....................    counter1--; 
08B0:  DECF   17,F
....................    counter2--; 
08B2:  DECF   18,F
....................    counter3--; 
08B4:  DECF   19,F
....................    if (counter0==0){ 
08B6:  MOVF   16,F
08B8:  BNZ   08C2
....................       counter0=2; 
08BA:  MOVLW  02
08BC:  MOVWF  16
....................       PORTB=PORTB^0b00000001;        
08BE:  MOVLW  01
08C0:  XORWF  F81,F
....................          }  
....................     if ( counter1==0){ 
08C2:  MOVF   17,F
08C4:  BNZ   08CE
....................       counter1=3; 
08C6:  MOVLW  03
08C8:  MOVWF  17
....................       PORTB=PORTB^0b00000010;  
08CA:  MOVLW  02
08CC:  XORWF  F81,F
....................     } 
....................     if ( counter2==0){ 
08CE:  MOVF   18,F
08D0:  BNZ   08D8
....................       counter2=4; 
08D2:  MOVLW  04
08D4:  MOVWF  18
....................       PORTB=PORTB^0b00000100;  
08D6:  XORWF  F81,F
....................     } 
....................     if( counter3==0){ 
08D8:  MOVF   19,F
08DA:  BNZ   08E4
....................        counter3=6; 
08DC:  MOVLW  06
08DE:  MOVWF  19
....................        PORTB=PORTB^0b00001000; 
08E0:  MOVLW  08
08E2:  XORWF  F81,F
....................     } 
08E4:  BCF    FF2.2
08E6:  GOTO   0864
.................... }                  
....................  
.................... // ???? ???t??a? a?????? ???µ?se?? 
.................... void init (void) {        
....................    // ???µ?s? t?? p????aµµat???µe??? d?a???t? st?? t?µ? 1/64 
....................    SETUP_TIMER_0(T0_INTERNAL | T0_DIV_32 ); 
08EA:  MOVLW  84
08EC:  MOVWF  FD5
....................    //  ?????? t?µ? t??  timer0 ?ste ?a s?µﬂa????? d?a??p?? ???e 10 ms 
....................    set_timer0(46786);  
08EE:  MOVLW  B6
08F0:  MOVWF  FD7
08F2:  MOVLW  C2
08F4:  MOVWF  FD6
....................    // ??e???p???s? t?? d?a??p?? ap? t?? timer0 
....................    enable_interrupts(INT_TIMER0);  
08F6:  BSF    FF2.5
....................       // ??e???p???s? t?? ?e????? d?a??pt? t?? d?a??p?? 
....................    enable_interrupts(GLOBAL);  
08F8:  MOVLW  C0
08FA:  IORWF  FF2,F
....................  
....................    set_tris_b(0x00);                     
08FC:  MOVLW  00
08FE:  MOVWF  F93
....................    PORTB=0x00;                           
0900:  CLRF   F81
0902:  GOTO   092C (RETURN)
.................... } 
....................             
.................... // Interrupt ???e (65536-63661)*[1/(Fclock/4)]*Prescaler = 9.994ms 
....................  

Configuration Fuses:
   Word  1: 0E24   PLL5 CPUDIV1 USBDIV HSPLL NOFCMEN NOIESO
   Word  2: 1E3F   NOPUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8000   CCP2B3 NOPBADEN NOLPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP ICSP1 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: A00F   NOWRT NOWRTC WRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
