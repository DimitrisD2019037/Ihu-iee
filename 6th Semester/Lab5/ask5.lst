CCS PCH C Compiler, Version 5.011, 5967               05-Áðñ-23 02:23

               Filename:   E:\Di-Pa\ask5\ask5.lst

               ROM used:   306 bytes (1%)
                           Largest free fragment is 30410
               RAM used:   22 (1%) at main() level
                           24 (1%) worst case
               Stack used: 3 locations (1 in main + 2 for interrupts)
               Stack size: 31

*
0800:  GOTO   091C
*
0808:  NOP   
080A:  NOP   
080C:  NOP   
080E:  NOP   
0810:  NOP   
0812:  NOP   
0814:  NOP   
0816:  NOP   
0818:  MOVWF  04
081A:  MOVFF  FD8,05
081E:  MOVFF  FE0,06
0822:  MOVLB  0
0824:  MOVFF  FE9,0C
0828:  MOVFF  FEA,07
082C:  MOVFF  FE1,08
0830:  MOVFF  FE2,09
0834:  MOVFF  FD9,0A
0838:  MOVFF  FDA,0B
083C:  MOVFF  FF3,12
0840:  MOVFF  FF4,13
0844:  MOVFF  FFA,14
0848:  MOVFF  00,0E
084C:  MOVFF  01,0F
0850:  MOVFF  02,10
0854:  MOVFF  03,11
0858:  BTFSS  FF2.3
085A:  GOTO   0864
085E:  BTFSC  FF2.0
0860:  GOTO   08D2
0864:  MOVFF  0E,00
0868:  MOVFF  0F,01
086C:  MOVFF  10,02
0870:  MOVFF  11,03
0874:  MOVFF  0C,FE9
0878:  MOVFF  07,FEA
087C:  BSF    07.7
087E:  MOVFF  08,FE1
0882:  MOVFF  09,FE2
0886:  MOVFF  0A,FD9
088A:  MOVFF  0B,FDA
088E:  MOVFF  12,FF3
0892:  MOVFF  13,FF4
0896:  MOVFF  14,FFA
089A:  MOVF   04,W
089C:  MOVFF  06,FE0
08A0:  MOVFF  05,FD8
08A4:  RETFIE 0
.................... #include <main.h> 
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
....................  
.................... #list 
....................  
.................... #DEVICE HIGH_INTS=TRUE 
.................... #device adc=10 
....................  
.................... #FUSES NOWDT                     //No Watch Dog Timer 
.................... #FUSES WDT32768                    //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES HSPLL                     //High Speed Crystal/Resonator with PLL enabled 
.................... #FUSES NOPROTECT                 //Code not protected from reading 
.................... #FUSES BROWNOUT                //No brownout reset 
.................... //#FUSES BORV20                    //Brownout reset at 2.0V 
.................... #FUSES NOPUT                     //No Power Up Timer 
.................... #FUSES NOCPD                     //No EE protection 
.................... #FUSES STVREN                    //Stack full/underflow will cause reset 
.................... #FUSES NODEBUG                   //No Debug mode for ICD 
.................... #FUSES NOLVP                     //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                     //Program memory not write protected 
.................... #FUSES NOWRTD                    //Data EEPROM not write protected 
.................... #FUSES NOIESO                      //Internal External Switch Over mode enabled 
.................... #FUSES NOFCMEN                     //Fail-safe clock monitor enabled 
.................... #FUSES NOPBADEN                 ///PORTB pins are configured as analog input channels on RESET 
.................... #FUSES NOWRTC                    //configuration not registers write protected 
.................... #FUSES NOWRTB                    //Boot block not write protected 
.................... #FUSES NOEBTR                    //Memory not protected from table reads 
.................... #FUSES NOEBTRB                   //Boot block not protected from table reads 
.................... #FUSES NOCPB                     //No Boot Block code protection 
.................... #FUSES MCLR                      //Master Clear pin enabled 
.................... #FUSES NOLPT1OSC                   //Timer1 configured for low-power operation 
.................... #FUSES NOXINST                   //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #FUSES PLL5                      //Divide By 12(48MHz oscillator input) 
.................... #FUSES CPUDIV1                   //System Clock by 2 
.................... #FUSES USBDIV                    //USB clock source comes from PLL divide by 2 
.................... #FUSES VREGEN                    //USB voltage regulator enabled 
.................... #FUSES ICPRT                     //ICPRT enabled 
.................... #FUSES WRTB 
.................... #FUSES NOICPRT  
.................... #FUSES NOLPT1OSC 
.................... #FUSES CCP2B3  
.................... #FUSES NOCPB 
.................... #FUSES NOCPD 
.................... #FUSES NOWRTC 
.................... #FUSES NOWRTD 
.................... #FUSES NOEBTR 
.................... #FUSES NOEBTRB               
....................  
.................... /* systm clock is 48 MHz */ 
.................... #use delay(clock=48000000,RESTART_WDT) 
08A6:  CLRF   FEA
08A8:  MOVLW  17
08AA:  MOVWF  FE9
08AC:  MOVF   FEF,W
08AE:  BZ    08D0
08B0:  MOVLW  0F
08B2:  MOVWF  01
08B4:  MOVLW  BF
08B6:  MOVWF  00
08B8:  CLRWDT
08BA:  DECFSZ 00,F
08BC:  BRA    08B8
08BE:  DECFSZ 01,F
08C0:  BRA    08B4
08C2:  MOVLW  8F
08C4:  MOVWF  00
08C6:  DECFSZ 00,F
08C8:  BRA    08C6
08CA:  CLRWDT
08CC:  DECFSZ FEF,F
08CE:  BRA    08B0
08D0:  RETURN 0
.................... /* --- BEGIN: changes required for bootloader ------------------------------ */ 
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* map reset vector and interrupt vector                                     */ 
.................... /* 0x000-0x7FF is used by the bootloader. The bootloader maps the original   */ 
.................... /* reset vecotr (0x000) to 0x800 and the reset vector (0x008) to 0x800.      */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... #build (reset=0x800, interrupt=0x808) 
....................  
.................... /* ------------------------------------------------------------------------- */ 
.................... /* reserve boot block area                                                   */ 
.................... /* This memory range is used by the bootloader, so the application must not  */ 
.................... /* use this area.                                                            */ 
.................... /* ------------------------------------------------------------------------- */ 
.................... #org 0, 0x7FF {} 
....................  
.................... /* --- END: changes required for bootloader -------------------------------- */ 
....................  
....................  
....................  
....................  
....................  
.................... #byte PORTB=0xF81 //???sµ?? t?? ????? µe t?? ??s? t??? st?? µ??µ?       
.................... #byte PORTD=0xF83 
....................  
.................... // ????s? s??a?t?se??, global µetaß??t?? 
.................... void init (void);        
.................... void rb (void);        
....................  
.................... void main(){ 
*
091C:  CLRF   FF8
091E:  BCF    FF1.0
0920:  BSF    FD0.7
0922:  BSF    07.7
0924:  MOVF   FC1,W
0926:  ANDLW  C0
0928:  IORLW  0F
092A:  MOVWF  FC1
092C:  MOVLW  07
092E:  MOVWF  FB4
....................    init();      //???s? t?? ???t??a? a?????p???s?? 
0930:  BRA    0908
....................    while (TRUE) {;}      
0932:  BRA    0932
.................... } 
....................          
0934:  SLEEP 
.................... //???t??a a?????p???s?? 
.................... void init (void){ 
....................    set_tris_b(0xff);        // ?a????sµ?? t?? p??ta? ? ?? e?s?d?? 
*
0908:  MOVLW  FF
090A:  MOVWF  F93
....................    set_tris_d(0x00);      //  ?a????sµ?? t?? p??ta? D ?? e??d?? 
090C:  MOVLW  00
090E:  MOVWF  F95
....................    enable_interrupts(GLOBAL);     //??e???p???s? t?? ?e????? d?a??pt? d?a??p?? 
0910:  MOVLW  C0
0912:  IORWF  FF2,F
....................    enable_interrupts(INT_RB); //??e???p???s? d?a??p?? ap? a??a??  
0914:  BSF    FF2.3
....................                   //?at?stas?? st??? a???d??te? RB4, RB5, RB6, RB7 
....................    PORTD=0x00;                //a????? t?µ? 0 st?? ???a D 
0916:  CLRF   F83
0918:  GOTO   0932 (RETURN)
.................... } 
....................  
....................  
.................... //???t??a d?a??p?? 
.................... #INT_RB   
.................... void rb (void){    
....................    if(input(PIN_B0)==1){ 
*
08D2:  BSF    F93.0
08D4:  BTFSS  F81.0
08D6:  BRA    0902
....................       delay_ms(3000); //??aµ??? ??a 3 de?te???epta 
08D8:  MOVLW  0C
08DA:  MOVWF  16
08DC:  MOVLW  FA
08DE:  MOVWF  17
08E0:  RCALL  08A6
08E2:  DECFSZ 16,F
08E4:  BRA    08DC
....................       if(input(PIN_B0)==1){ //?? s??e??se? ?a e??a? e?e???p???µ???? 
08E6:  BSF    F93.0
08E8:  BTFSS  F81.0
08EA:  BRA    0902
....................                           //? s??a?e?µ?? e?e???p??e?ta? ? se????a 
....................       output_high(PIN_D0);//??e???p???s? se????a? 
08EC:  BCF    F95.0
08EE:  BSF    F8C.0
....................       delay_ms(3000); //a?aµ??? ??a 3 sec 
08F0:  MOVLW  0C
08F2:  MOVWF  16
08F4:  MOVLW  FA
08F6:  MOVWF  17
08F8:  RCALL  08A6
08FA:  DECFSZ 16,F
08FC:  BRA    08F4
....................       output_low(PIN_D0);//?pe?e???p???s? se????a?    
08FE:  BCF    F95.0
0900:  BCF    F8C.0
....................       }  
....................    } 
0902:  BCF    FF2.0
0904:  GOTO   0864
.................... } 

Configuration Fuses:
   Word  1: 0E24   PLL5 CPUDIV1 USBDIV HSPLL NOFCMEN NOIESO
   Word  2: 1E3F   NOPUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8000   CCP2B3 NOPBADEN NOLPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP ICSP1 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: A00F   NOWRT NOWRTC WRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
